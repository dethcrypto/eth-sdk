const hre = require('hardhat')
import { getMainnetSdk } from '@dethcrypto/eth-sdk-client'
import { Signer } from 'ethers'
import { formatEther } from 'ethers/lib/utils'
import { ethers } from 'hardhat'
ethers.utils.Logger.setLogLevel(ethers.utils.Logger.levels.ERROR) // turn off warnings

const userEOA = '0x3af015f6e3ac79d217198f00ef36af099d223e29'
const cTokens = [
  '0x4b0181102a0112a2ef11abee5563bb4a3176c9d7', //cSUSHI
  '0x39aa39c021dfbae8fac545936693ac917d5e7563', //cUSDC
]

async function main() {
  const signer = await impersonateAccount(userEOA)
  const sdk = getMainnetSdk(signer)

  console.log('before drip: ', formatEther(await sdk.tokens.comp.balanceOf(sdk.compound.comptroller.address)))
  await sdk.compound.treasury.drip()
  console.log('after drip: ', formatEther(await sdk.tokens.comp.balanceOf(sdk.compound.comptroller.address)))

  console.log('before claim: ', formatEther(await sdk.tokens.comp.balanceOf(userEOA)))
  const comptroller = sdk.compound.comptrollerImpl.attach(sdk.compound.comptroller.address)
  await comptroller['claimComp(address,address[])'](userEOA, cTokens)
  console.log('after claim: ', formatEther(await sdk.tokens.comp.balanceOf(userEOA)))
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error)
    process.exit(1)
  })

export async function impersonateAccount(address: string): Promise<Signer> {
  await hre.network.provider.request({
    method: 'hardhat_impersonateAccount',
    params: [address],
  })

  const signer = await hre.ethers.getSigner(address)

  return signer
}
